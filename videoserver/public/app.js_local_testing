var OV;
var session;

var sessionName;
var token;
var numVideos = 0;
var handler = 0;
var recorder = new MRecordRTC();
var meeting_start_time = null

const joinSession = () => {
    $('#join').show();
    $('#session').hide();
    $('#endmeeting').hide();
    $('#permission').hide()
    $('#permission-denied').hide()
    sessionName = ROOM_ID;
    console.log(sessionName)
    getToken(() => {

        //Get an OpenVidu object ---
        OV = new OpenVidu();
		
	OV.setAdvancedConfiguration({noStreamPlayingEventExceptionTimeout:20000})
        OV.enableProdMode()

        //Init a session ---
        session = OV.initSession();

        session.on('connectionCreated', event => {});

        session.on('connectionDestroyed', event => {


        });

        // On every new Stream received...
        session.on('streamCreated', event => {

            // Subscribe to the Stream to receive it
            // HTML video will be appended to element with 'video-container' id
            var subscriber = session.subscribe(event.stream, 'video-container');

            // When the HTML video has been appended to DOM...
            subscriber.on('videoElementCreated', event => {
                // updateNumVideos(1);
            });

            // When the HTML video has been appended to DOM...
            subscriber.on('videoElementDestroyed', event => {
                // Add a new HTML element for the user's name and nickname over its video
                // updateNumVideos(-1);
            });

            // When the subscriber stream has started playing media...
            subscriber.on('streamPlaying', event => {});
        });

        session.on('streamDestroyed', event => {});

        session.on('sessionDisconnected', event => {
            if (RECORDING_AUDIO_ENABLED === '1') stopRecording();
            $('#join').hide();
            $('#session').hide();
            $('#endmeeting').show();
        });

        session.on('recordingStarted', event => {});

        session.on('recordingStopped', event => {});

        // On every asynchronous exception...
        session.on('exception', (exception) => {
            console.warn(exception);
        });

        // Connect to the session passing the retrieved token and some more data from
        //   the client (in this case a JSON with the nickname chosen by the user)

        session.connect(token)
            .then(() => {
                handler = setInterval(function() { // Check every 3 seconds of required number of participants joined the meeting
                    fetchNumberofconnections(function(session_info) {
                        if (session_info.session_details.connections.numberOfElements >= parseInt(REQUIRED_PARTICIPANTS)) {
                            clearInterval(handler);
                            handler = 0;
                            meeting_start_time = session_info.meeting_start_time
                            $('#session-title').text(sessionName);
                            $('#join').hide();
                            $('#session').show();
                            $('#endmeeting').hide();
                            $('#permission').hide()
                            $('#permission-denied').hide()

                            //Get our camera stream 					
                            var publisher = OV.initPublisher('video-container', {
                                audioSource: undefined, // The source of audio. If undefined default microphone
                                videoSource: undefined, // The source of video. If undefined default webcam
                                publishAudio: true, // Whether you want to start publishing with your audio unmuted or not
                                publishVideo: VIDEO_ENABLED === "1", // Whether you want to start publishing with your video enabled or not
                                resolution: '640x480', // The resolution of your video
                                frameRate: 30, // The frame rate of your video
                                insertMode: 'APPEND', // How the video is inserted in the target element 'video-container'
                                mirror: false // Whether to mirror your local video or not
                            });

                            //Specify the actions when events take place in our publisher			
                            // When the publisher stream has started playing media...
                            publisher.on('accessAllowed', event => {

                            });

                            publisher.on('accessDenied', event => {

                            });

                            publisher.on('accessDialogOpened', event => {

                            });

                            publisher.on('accessDialogClosed', event => {

                            });

                            // When the publisher stream has started playing media...
                            publisher.on('streamCreated', event => {

                            });

                            // When our HTML video has been added to DOM...
                            publisher.on('videoElementCreated', event => {

                                // updateNumVideos(1);
                                $(event.element).prop('muted', true); // Mute local video
                                setTimeout(endMeeting, parseInt(DURATION))
                                if (RECORDING_AUDIO_ENABLED === '1') startRecording(event);
                            });

                            // When the HTML video has been appended to DOM...
                            publisher.on('videoElementDestroyed', event => {

                                // Add a new HTML element for the user's name and nickname over its video
                                // updateNumVideos(-1);

                            });

                            // When the publisher stream has started playing media...
                            publisher.on('streamPlaying', event => {

                            });

                            //Publish your stream
                            session.publish(publisher);
                        } else {
                            console.log("Waiting for users")
                        }
                    });
                }, 3000);
            })
            .catch(error => {
                console.warn('There was an error connecting to the session:', error.code, error.message);
            });
        return false;
    });
}

//-----------------------------RECORDING API-----------------------------------------------------
//Recording - Start 
function startRecording(event) {
    recorder.disableLogs = true
    recorder.addStream(event.element.srcObject);
    recorder.mediaType = {
        recorderType: RecordRTC.StereoAudioRecorder,
        audio: RECORDING_AUDIO_ENABLED === '1',
        video: RECORDING_VIDEO_ENABLED === '1',

    };
    recorder.mimeType = {
        audio: 'audio/wav',
        video: 'video/webm',
        disableLogs: true,
    };
    console.log("recording started");
    recorder.startRecording();
}

//Recording - Stop 
function stopRecording() {
    recorder.stopRecording(function() {
        var blobs = (RECORDING_VIDEO_ENABLED === '1') ? recorder.getBlob().video : recorder.getBlob().audio
        userID = Math.floor(Math.random() * 9000)
        getSeekableBlob(blobs, function(seekable_blob) {
            var formData = new FormData();
            formData.append('blob', seekable_blob, 'test_video');
            formData.append('blob_type', 'video');
            formData.append('userId', userID);
            formData.append('roomId', ROOM_ID);
            formData.append('meeting_start_time',meeting_start_time)
            formData.append('transcriptionEnabled',TRANSCRIPTION_ENABLED)
            
           console.log("sending video " + userID)

            transcription('/transcription/start', formData, function() {
                console.log("Video successfully uploaded!");
            });
        });
    });
}

//Call Transcription Function 
async function transcription(url, data, callback) {
    var request = new XMLHttpRequest();
    request.onreadystatechange = function() {
        if (request.readyState == 4 ** request.status == 200) {
            callback(location.href + request.responseText);
        }
    };
    // request.setRequestHeader('Access-Control-Allow-Origin', '*')
    request.open('POST', "http://sophie.ovgu.de:8000/videoapp/transcription/start", true);
    request.send(data);
}

// ---------------------- End RECORDING API --------------------------

// ---------------------- SESSION API -----------------------------------
function leaveSession() {
    //Leave the session by calling 'disconnect' method over the Session object ---
    session.disconnect();
}

//End Meeting 
function endMeeting() {
    closeSession();
}

//get Token (identification of each client in the session)
function getToken(callback) {
    httpRequest(
        'POST',
        'api/get-token', {
            sessionName: sessionName
        },
        'Request of TOKEN gone WRONG:',
        res => {
            token = res[0]; // Get token from response
            callback(token); // Continue the join operation
        }
    );
}

//Remove User from Session
function removeUser() {
    httpRequest(
        'POST',
        'api/remove-user', {
            sessionName: sessionName,
            token: token
        },
        'User couldn\'t be removed from session',
        res => {
            console.warn("You have been removed from session " + sessionName);
        }
    );
}

//close session 
function closeSession() {
    httpRequest(
        'DELETE',
        'api/close-session', {
            sessionName: sessionName
        },
        'Session couldn\'t be closed',
        res => {
            console.warn("Session " + sessionName + " has been closed");
        }
    );
}


//fetch Info about the current session - Used for getting the number of user currently connected
function fetchNumberofconnections(callback) {
    session_info = 0
    httpRequestSync(
        'POST',
        'api/fetch-info', {
            sessionName: sessionName
        },
        'Session couldn\'t be fetched',
        res => {
            session_info = res;
        }
    );
    callback(session_info)
}
// ---------------------- END SESSION API -----------------------------------

function httpRequest(method, url, body, errorMsg, callback) {
    $('#textarea-http').text('');
    var http = new XMLHttpRequest();
    http.open(method, url, true);
    http.setRequestHeader('Content-type', 'application/json');
    http.addEventListener('readystatechange', processRequest, false);
    http.send(JSON.stringify(body));

    function processRequest() {
        if (http.readyState == 4) {
            if (http.status == 200) {
                try {
                    callback(JSON.parse(http.responseText));
                } catch (e) {
                    callback(e);
                }
            } else {
                console.warn(errorMsg + ' (' + http.status + ')');
                console.warn(http.responseText);
            }
        }
    }
}

function httpRequestSync(method, url, body, errorMsg, callback) {
    var http = new XMLHttpRequest();
    http.open(method, url, false);
    http.setRequestHeader('Content-type', 'application/json');
    http.addEventListener('readystatechange', processRequest, false);
    http.send(JSON.stringify(body));

    function processRequest() {
        if (http.readyState == 4) {
            if (http.status == 200) {
                try {
                    callback(JSON.parse(http.responseText));
                } catch (e) {
                    callback(e);
                }
            } else {
                console.warn(errorMsg + ' (' + http.status + ')');
                console.warn(http.responseText);
            }
        }
    }
}

events = '';

window.onbeforeunload = function() { // Gracefully leave session
    if (session) {
        if (RECORDING_AUDIO_ENABLED === '1') stopRecording();
        removeUser();
        leaveSession();
    }
}

// function updateNumVideos(i) {
//     numVideos += i;
//     $('video').removeClass();
//     switch (numVideos) {
//         case 1:
//             $('video').addClass('two');
//             break;
//         case 2:
//             $('video').addClass('two');
//             break;
//         case 3:
//             $('video').addClass('three');
//             break;
//         case 4:
//             $('video').addClass('four');
//             break;
//     }
// }

function permissionDenied() {
    $('#join').hide();
    $('#session').hide();
    $('#endmeeting').hide();
    $('#permission').hide()
    $('#permission-denied').show()
}